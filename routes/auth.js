const router = require('express').Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const adminNumber = "9159143736";

// REGISTER route remains the same as before...
router.post('/register', async (req, res) => {
Â  Â  // ... no changes needed here
Â  Â  try {
Â  Â  Â  Â  const existingUser = await User.findOne({ mobileNumber: req.body.mobileNumber });
Â  Â  Â  Â  if (existingUser) {
Â  Â  Â  Â  Â  Â  return res.status(409).json("A user with this mobile number already exists.");
Â  Â  Â  Â  }
Â  Â  Â  Â  const salt = await bcrypt.genSalt(10);
Â  Â  Â  Â  const hashedMpin = await bcrypt.hash(req.body.mpin, salt);
Â  Â  Â  Â  const newUser = new User({
Â  Â  Â  Â  Â  Â  name: req.body.name,
Â  Â  Â  Â  Â  Â  mobileNumber: req.body.mobileNumber,
Â  Â  Â  Â  Â  Â  location: req.body.location,
Â  Â  Â  Â  Â  Â  mpin: hashedMpin,
Â  Â  Â  Â  Â  Â  role: req.body.mobileNumber === adminNumber ? "Admin" : "User"
Â  Â  Â  Â  });
Â  Â  Â  Â  const user = await newUser.save();
Â  Â  Â  Â  res.status(201).json(user);
Â  Â  } catch (err) {
Â  Â  Â  Â  res.status(500).json(err);
Â  Â  }
});

// LOGIN route is updated
router.post('/login', async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const user = await User.findOne({ mobileNumber: req.body.mobileNumber });
Â  Â  Â  Â  if (!user) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ message: "User not found!" }); // Changed to JSON for consistency
Â  Â  Â  Â  }

Â  Â  Â  Â  const validMpin = await bcrypt.compare(req.body.mpin, user.mpin);
Â  Â  Â  Â  if (!validMpin) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ message: "Wrong MPIN!" }); // Changed to JSON for consistency
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // **CORRECT**: Include user role and ID in the JWT payload
Â  Â  Â  Â  const accessToken = jwt.sign(
Â  Â  Â  Â  Â  Â  { id: user._id, role: user.role }, 
Â  Â  Â  Â  Â  Â  process.env.JWT_SECRET,
Â  Â  Â  Â  Â  Â  { expiresIn: "3d" }
Â  Â  Â  Â  );

        // Extract necessary fields from user document
Â  Â  Â  Â  const { mpin, ...others } = user._doc;

        // ðŸ’¡ CRITICAL FRONTEND FIX: Ensure the accessToken is attached to the user object 
        // that is saved to AsyncStorage, allowing it to be retrieved in JoinScheme.js 
        // as 'user.token' (if you choose to use it for API calls later) and making 
        // sure the mobile number is correctly included.

Â  Â  Â  Â  res.status(200).json({ ...others, accessToken });

Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err); // Log the error for debugging
Â  Â  Â  Â  res.status(500).json({ message: "Internal server error" });
Â  Â  }
});


// =================================================================
// --- RESET MPIN ROUTE ---
// =================================================================
router.post('/reset-mpin', async (req, res) => {
Â  Â  const { mobileNumber, newMpin } = req.body;

Â  Â  // Basic validation
Â  Â  if (!mobileNumber || !newMpin || newMpin.length !== 4) {
Â  Â  Â  Â  return res.status(400).json({ message: "Valid 10-digit mobile number and 4-digit MPIN are required." });
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  // Find the user by mobile number
Â  Â  Â  Â  const user = await User.findOne({ mobileNumber: mobileNumber });
Â  Â  Â  Â  if (!user) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ message: "User with this mobile number not found." });
Â  Â  Â  Â  }

Â  Â  Â  Â  // Hash the new MPIN
Â  Â  Â  Â  const salt = await bcrypt.genSalt(10);
Â  Â  Â  Â  const hashedMpin = await bcrypt.hash(newMpin, salt);

Â  Â  Â  Â  // Update the user's MPIN and save
Â  Â  Â  Â  user.mpin = hashedMpin;
Â  Â  Â  Â  await user.save();

Â  Â  Â  Â  res.status(200).json({ message: "MPIN has been reset successfully." });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error resetting MPIN:", error);
Â  Â  Â  Â  res.status(500).json({ message: "Server error. Please try again later." });
Â  Â  }
});


module.exports = router;
